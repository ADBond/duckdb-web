on:
  schedule:
    - cron: "0 0 * * 1"  # run once a week on mondays
  workflow_dispatch: {}  # allow running manually from the github ui

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

name: Update docs
jobs:
  update_docs:
    name: Update docs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v3
        with:
          cache: 'pip'
      - run: npm install jsdoc-to-markdown
      - run: pip install wheel pip -U
      - run: pip install -r requirements.txt -U
      - run: pip install duckdb --pre -U  # grab the latest duckdb python dev version
      - run: gh repo clone duckdb/duckdb
      - uses: actions/github-script@v6
        id: workflow-id
        with:
          script: |
            const commits = (await github.repos.listCommits({owner: 'duckdb', repo: 'duckdb', sha: 'master'})).data;

            let commit, good;
            for (commit of commits) {
              const statuses = (await github.repos.listCommitStatusesForRef({
                  owner: 'duckdb',
                  repo: 'duckdb',
                  ref: commit.sha
              })).data;

              if (statuses.length === 0) continue;

              good = statuses.every(status => status.state === 'success');
              if (good) break;
            }

            if (good) {
              console.log("found a successful build: " + commit.sha);
            } else {
              console.log("couldn't find a successful build");
              return;
            }

            const workflows = await github.actions.listWorkflowRunsForRepo({
              owner: 'duckdb',
              repo: 'duckdb',
              head_sha: commit.sha,
            });

            const workflow = workflows.data.workflow_runs.find(workflow => workflow.name === 'LinuxRelease');
            return workflow.id;
      - name: download latest duckdb cli binary
        run: |
          gh run download ${{ steps.workflow-id.outputs.result }} --repo duckdb/duckdb --name duckdb-binaries-linux
          mkdir -p duckdb/build/debug
          unzip duckdb_cli-linux-amd64.zip -d duckdb/build/debug

      - name: Update docs
        uses: technote-space/create-pr-action@v2
        with:
          EXECUTE_COMMANDS: |
            ./scripts/generate_all_docs.sh duckdb

            # remove things we don't want commited
            rm *.zip
            rm -rf duckdb
          COMMIT_MESSAGE: "chore: auto update docs"
          COMMIT_NAME: "GitHub Actions"
          COMMIT_EMAIL: "example@example.com"
          PR_BRANCH_NAME: "chore-update-docs-${PR_ID}"
          PR_TITLE: "chore: auto update docs"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
